@using QuoteCalculator.Data
@model tbl_InternationalRemoval

@{
    ViewBag.Title = "Index";
}
<style>
    .input-validation-error {
        border: 1px solid #f00 !important;
    }

    .field-validation-error {
        color: #f00 !important;
    }
</style>
@*<script src="https://maps.googleapis.com/maps/api/js?libraries=places&key=AIzaSyBbpbWgbNCOdEBSDx0rznqu5CU2TYBPXZE">
    </script>*@
<script type="text/javascript" src="https://maps.googleapis.com/maps/api/js?libraries=places,distancematrix,geocode&key=AIzaSyBO9bMGXj5yf2oOIN0sJMiz3lZQ3ea8Fsc"></script>
@*<div class="page-breadcrumb text-center font-nr mb-2">
        <ul>
            <li><a href="@Url.Action("Index","Home")">Home</a></li>
            <li><a href="#">Get a quote</a></li>
            <li><a href="#">Your international move</a></li>
        </ul>
    </div>*@
<h1 class="text-primary text-center mb-4"><b>Your move details</b></h1>
<div class="row justify-content-center">
    <div class="col-md-9 my-4">
        <ul class="progress-steps">
            <li class="active">About You</li>
            <li>Quote Type</li>
            <li>Move Details</li>
        </ul>
    </div>
    <div class="col-12">
        @using (Html.BeginForm("Index", "InternationalRemoval", FormMethod.Post, new { @class = "custom-inputs", @autocomplete = "off" }))
        {
            <div class="row">
                <div class="col-12 my-4">
                    <span class="text-warning"><b>Fields marked with * are mandatory</b></span>
                </div>
                @*@Html.ValidationMessage("ErrorMessage")*@
                <div class="col-12">

                    @*<form class="custom-inputs">*@
                    <div class="row">
                        <div class="col-md-6 form-group">
                            <div class="row">
                                <div class="col-auto small-fixed-input">
                                    @Html.HiddenFor(m => m.BranchId)
                                    @Html.HiddenFor(m => m.Id)
                                    @Html.HiddenFor(m => m.Distance)
                                    @Html.LabelFor(x => x.TitleId)
                                    @Html.DropDownListFor(x => x.TitleId, new SelectList(ViewBag.TitleList, "Id", "TitleName"), "- Select -", new { @class = "custom-selection form-control", @placeholder = "Type Here" })
                                    <p>
                                        <span class="field-validation-error" data-valmsg-for="TitleId" data-valmsg-replace="true"><span id="TitleId-error" class=""></span></span>
                                    </p>
                                </div>
                                <div class="col">
                                    @Html.LabelFor(x => x.Firstname)
                                    @Html.TextBoxFor(x => x.Firstname, new { @class = "form-control", @placeholder = "Type Here" })
                                    @Html.ValidationMessageFor(m => m.Firstname)
                                </div>
                            </div>
                        </div>
                        <div class="col-md-6 form-group">
                            @Html.LabelFor(x => x.Lastname)
                            @Html.TextBoxFor(x => x.Lastname, new { @class = "form-control", @placeholder = "Type Here" })
                            @Html.ValidationMessageFor(m => m.Lastname)
                        </div>
                        <div class="col-md-6 form-group">
                            @Html.LabelFor(x => x.Email)
                            @Html.TextBoxFor(x => x.Email, new { @class = "form-control", @placeholder = "Type Here" })
                            @Html.ValidationMessageFor(m => m.Email)
                        </div>
                        <div class="col-md-6 form-group">
                            <div class="row">
                                <div class="col-6 form-group">
                                    @Html.LabelFor(x => x.CountryCode)
                                    @Html.DropDownListFor(x => x.CountryCode , new SelectList(
                                                            (ViewBag.CountryCodeList as IEnumerable<tbl_CountryCode>)
                                                            .Select(
                                                                a=>new { Id =a.CountryCode, CountryCode = a.CountryName + " (" + a.CountryCode + ")"}
                                                            ),"Id","CountryCode"), new { @class = "form-control" })
                                    <p>
                                        <span class="field-validation-error" data-valmsg-for="CountryCode" data-valmsg-replace="true"><span id="CountryCode-error" class=""></span></span>
                                    </p>
                                </div>
                                <div class="col-6 form-group">
                                    @Html.LabelFor(x => x.Telephone)
                                    @Html.TextBoxFor(x => x.Telephone, new { @class = "form-control", @placeholder = "Type Here", @onkeypress = "return isNumberKey(event)", @maxlength = "20" })
                                    @Html.ValidationMessageFor(m => m.Telephone)
                                </div>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="row">
                                <div class="col-12 form-group">
                                    @Html.LabelFor(m => m.FromCountryName)
                                    <input type="text" class="form-control valid" value="United Kingdom" aria-invalid="false" readonly="">

                                </div>
                                <div class="col-12 form-group">
                                    @Html.LabelFor(x => x.PostCode)
                                    @Html.TextBoxFor(x => x.PostCode, new { @class = "form-control", @placeholder = "Type Here", @onblur = "CheckValidPostCode()" })
                                    <span class="text-danger" id="isPostCodeValid">Please enter valid post code</span>
                                    <span class="field-validation-error" data-valmsg-for="PostCode" data-valmsg-replace="true"><span id="PostCode-error" class=""></span></span>
                                    @*@Html.ValidationMessageFor(m => m.PostCode)*@
                                </div>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="row">
                                <div class="col-12 form-group">
                                    <div>
                                        @Html.LabelFor(m => m.ToCountryCode)
                                        @Html.DropDownListFor(x => x.ToCountryCode, new SelectList(ViewBag.CountryList, "country_code", "country"), "- Select -", new { @class = "form-control ", @placeholder = "Type Here" })
                                        @*@Html.ValidationMessageFor(m => m.ToCountryCode)*@
                                    </div>
                                    <span class="field-validation-error" data-valmsg-for="ToCountry" data-valmsg-replace="true"><span id="ToCountry-error" class=""></span></span>
                                </div>
                                <div class="col-12 form-group">
                                    @Html.LabelFor(m => m.CityName)
                                    <div>
                                        @*<select id="MovingToCityId" name="CityName" class="custom-selection form-control niceselect"></select>*@
                                        @Html.DropDownListFor(x => x.CityName, new List<SelectListItem>(), new { @class = " form-control", @placeholder = "Type Here" })
                                        @Html.ValidationMessageFor(m => m.CityName)
                                    </div>
                                </div>
                                <div class="col-10 col-md-8 form-group">
                                    @Html.LabelFor(x => x.EstimatedMoveDate)
                                    <div class="input-group date" id='EstimatedMoveDate'>

                                        <input type="text" name="EstimatedMoveDate" class="form-control" placeholder="dd/mm/yyyy" id="basic-url">
                                        <div class="input-group-append input-group-addon">
                                            <span class="input-group-text"><i class="bx bx-calendar-alt font-md"></i></span>
                                        </div>
                                    </div>
                                    @*@Html.ValidationMessageFor(m => m.EstimatedMoveDate)*@
                                    <span class="field-validation-error" data-valmsg-for="EstimatedMoveDate" data-valmsg-replace="true"><span id="EstimatedMoveDate-error" class=""></span></span>
                                </div>
                            </div>
                        </div>
                        <div class="col-sm-10 col-md-7 col-lg-5">
                            <div class="custom-check">
                                <input type="checkbox" name="IsConditionApply"
                                       id="IsConditionApply" onclick="isPrivacyTerms();">
                                <label for="IsConditionApply">
                                    <a href="https://www.anglopacific.co.uk/privacy_policy.htm" target="_blank">
                                        I agree to the terms and conditions outlined in the privacy policy
                                    </a>
                                </label>
                                <p>
                                    <span class="field-validation-error" data-valmsg-for="IsConditionApply" data-valmsg-replace="true"><span id="IsConditionApply-error" class=""></span></span>
                                </p>
                            </div>
                        </div>
                    </div>
                </div>

                <div class="col-12 mt-5">
                    <div class="border-top pt-4">
                        <div class="row justify-content-between journey-btns">
                            <div class="col-sm-auto">
                                @*<button class="btn btn-secondary btn-lg rounded-pill d-flex align-items-center justify-content-center"><span class="pl-2" style="transform: rotate(180deg);">&#x27A1;</span> Back</button>*@
                                @*<a class="btn btn-secondary btn-lg rounded-pill d-flex align-items-center justify-content-center" href="@Url.Action("Index","Home")"><span class="pl-2" style="transform: rotate(180deg);">&#x27A1;</span> Back</a>*@
                            </div>
                            @*<div class="col-sm text-center">
                                    <p class="mb-0 text-danger text-uppercase">Attention</p>
                                    <p>No option has been selected above. Plesae select one to countinue.</p>
                                </div>*@
                            <div class="col-sm-auto">
                                <button type="submit" class="btn btn-warning btn-lg rounded-pill d-flex align-items-center justify-content-center">Next <span class="pl-2">&#x27A1;</span></button>
                            </div>
                        </div>
                    </div>
                </div>

                @*</form>*@
            </div>
        }
    </div>
</div>


<script type="text/javascript">

     $(document).ready(function (e) {
        var getUrlParameter = function getUrlParameter(sParam) {
            var sPageURL = window.location.search.substring(1),
                sURLVariables = sPageURL.split('&'),
                sParameterName,
                i;

            for (i = 0; i < sURLVariables.length; i++) {
                sParameterName = sURLVariables[i].split('=');

                if (sParameterName[0] === sParam) {
                    return sParameterName[1] === undefined ? true : decodeURIComponent(sParameterName[1]);
                }
            }
        };
        var country = getUrlParameter('country');
        if (country != null) {
            $("Select[id='ToCountryCode']").val(country);
            OnToCountryCodeChange();
        }

        //var url = window.location.href;
        //var country = url.substring(url.lastIndexOf('?') + 1);
        //if (country != null) {
        //    var countryCode = country.split('country=')[1];
        //    $("Select[id='ToCountryCode']").val(countryCode);
        //    OnToCountryCodeChange();
        //}



        $("#isPostCodeValid").text("");
        $('#EstimatedMoveDate').datepicker({
            format: 'dd/mm/yyyy',
            startDate: new Date()
        }).on('change', function () {
            $('.datepicker').hide();
        });

        if ($("#Id").val() != "0") {
            if (@Model.Id > 0) {
                var countryCode = '@Model.ToCountryCode';
                if (countryCode != null) {
                    $("#ToCountryCode").val(countryCode.toString());
                    OnToCountryCodeChange();
                    CheckValidPostCode();
                    var day = '@Model.EstimatedMoveDate.Value.Day';
                    var month = '@Model.EstimatedMoveDate.Value.Month';
                    var year = '@Model.EstimatedMoveDate.Value.Year';
                    $("#EstimatedMoveDate").datepicker("setDate", new Date(year, month-1, day));
                }
            }
        }


    });
    $("#ToCountryCode").change(function () {
        OnToCountryCodeChange();
    })

    function OnToCountryCodeChange() {
        var countryId = $("#ToCountryCode").val();
         $.ajax({
             url: '@Url.Action("GetCityListByCountryId", "InternationalRemoval")',
             async: false,
             type: 'POST',
             data: { 'countryCode': countryId },
             success: function (data) {
                 var cityName = '@Model.CityName';
                 $("#MovingToCityId").html("");
                 var ToCountryDDL = "<select'>";
                 for (var i = 0; i < data.length; i++) {
                     if (cityName != null && data[i].CityName == cityName) {
                         ToCountryDDL = ToCountryDDL + '<option value = "' + data[i].CityName + '" Selected>' + data[i].CityName + '</option>';
                     } else {
                         ToCountryDDL = ToCountryDDL + '<option value = "' + data[i].CityName + '">' + data[i].CityName + '</option>';
                     }
                 }
                 ToCountryDDL = ToCountryDDL + '</select>';
                // $.each(data, function (i, data) {
                //     if (cityName != null && data.CityName == cityName) {
                //         $("#MovingToCityId").append('<option value="' + data.CityName + '" selected>' +
                //             data.CityName + '</option>');
                //     } else {
                //         $("#MovingToCityId").append('<option value="' + data.CityName + '">' +
                //             data.CityName + '</option>');
                //     }
                // });
                // $("#MovingToCityId").niceSelect('update');
                 $("#CityName").html(ToCountryDDL);
             },
         })
    }

     function isPrivacyTerms() {
        var isPrivacyTerms = $('#IsConditionApply').is(":checked");
        $("#IsConditionApply").val(isPrivacyTerms);
     }
    function CheckValidPostCode() {
         var postCode = $("#PostCode").val();
        if (postCode == "") {
            $("#isPostCodeValid").text("");
         }
         $.ajax({
             url: '@Url.Action("CheckValidPostCode", "InternationalRemoval")',
             async: false,
             type: 'POST',
             data: { 'postCode': postCode },
             success: function (data) {
                 if (data != false) {
                     $("#BranchId").val(data.branchId);
                     $("#isPostCodeValid").text("");
                     //google map
                     var service = new google.maps.DistanceMatrixService();
                     service.getDistanceMatrix({
                         origins: [postCode],
                         destinations: [data.brPostcode],
                         travelMode: google.maps.TravelMode.DRIVING,
                         unitSystem: google.maps.UnitSystem.METRIC,
                         avoidHighways: false,
                         avoidTolls: false
                     }, function (response, status) {
                         if (status == google.maps.DistanceMatrixStatus.OK &&
                             response.rows[0].elements[0].status != "ZERO_RESULTS") {
                             var distance = response.rows[0].elements[0].distance.value;
                             var duration = response.rows[0].elements[0].duration.value;
                             $("#Distance").val(distance)
                         }
                     });
                 }
                 else { $("#isPostCodeValid").text("Please enter valid post code"); }
             }
         });
    }

    $('form').submit(function () {
        var toCountry = $('#ToCountryCode').val();
        var EstimatedMoveDate = $('#EstimatedMoveDate > input').val();
        var IsConditionApply = $('#IsConditionApply').val();
        var arrStartDate = EstimatedMoveDate.split("/");
        var JQEstimateDate = new Date(arrStartDate[2], arrStartDate[1], arrStartDate[0]);

        var today = new Date();
        var dd = String(today.getDate()).padStart(2, '0');
        var mm = String(today.getMonth() + 1).padStart(2, '0');
        var yyyy = today.getFullYear();
        var TodayDate = new Date(yyyy, mm, dd);
        var TitleId = $('#TitleId').val();
        var DateCompare = JQEstimateDate < TodayDate;
        if (toCountry == "" || EstimatedMoveDate == "" || DateCompare == true || IsConditionApply == "on" || IsConditionApply == "false" || TitleId == "") {
            if (toCountry == "") {
                $('#ToCountryCode').next().addClass('input-validation-error');
                $('#ToCountry-error').text('To Country is Required.');
            }
            if (EstimatedMoveDate == "") {
                $('#EstimatedMoveDate').addClass('input-validation-error');
                $('#EstimatedMoveDate-error').text('Estimated Move Date is Required.');

            }
            if (DateCompare == true) {
                $('#EstimatedMoveDate').addClass('input-validation-error');
                $('#EstimatedMoveDate-error').text('Estimated Move date must be in future.');

            }
            if (IsConditionApply == "on" || IsConditionApply == "false") {
                $('#IsConditionApply-error').text('Please accept privacy terms.');
            }
            if (TitleId == "") {
                $('#TitleId').next().addClass('input-validation-error');
                $('#TitleId-error').text('Title is Required.');
            }
            return false;
        }
        if ($("#isPostCodeValid").text() != "") {
            return false;
        }

    });
    $('#ToCountryCode').change(function () {
        $('#ToCountryCode').next().removeClass('input-validation-error');
        $('#ToCountry-error').text('');
    });
    $('#EstimatedMoveDate').change(function () {
        $('#EstimatedMoveDate').removeClass('input-validation-error');
        $('#EstimatedMoveDate-error').text('');
    });
    $('#IsConditionApply').change(function () {
        $('#IsConditionApply-error').text('');
    });
    $('#TitleId').change(function () {
        $('#TitleId').next().removeClass('input-validation-error');
        $('#TitleId-error').text('');
    });
    function isNumberKey(evt) {
        var charCode = (evt.which) ? evt.which : event.keyCode
        if (charCode > 31 && (charCode < 48 || charCode > 57))
            //if (charCode != 40 && charCode != 41) {
            return false;
        //}
        return true;
    }

</script>
