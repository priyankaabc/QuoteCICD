@model QuoteCalculator.Service.Models.HeadingContentModel

@{
    ViewBag.Title = "ManageContent";
    Layout = null;
}
<style>
    .dropdown-menu {
        max-height: 250px;
    }

        .dropdown-menu > li:hover {
            color: white;
        }

  
    .panel-default {
        color: #333;
        background-color: #fff;
    }
</style>
<script src="~/Content/summernote/summernote.js"></script>
<link href="~/Content/summernote/summernote.css" rel="stylesheet" />
<div class="row">
    <div class="col-sm-12">
        @using (Html.BeginForm("ManageContent", "ContentMaster", FormMethod.Post, new { @class = "form-horizontal", @id = "form" }))
        {
            @Html.AntiForgeryToken()
            @Html.ValidationSummary(true, "", new { @class = "text-danger" })
            @Html.HiddenFor(model => model.HeadingContentId, new { @Name = "model.HeadingContentId" })

            <div class="row">
                <div class="col-md-12">
                    @Html.LabelFor(model => model.Heading, htmlAttributes: new { @class = "control-label" })
                    <div class="form-group">
                        @Html.EditorFor(model => model.Heading, new { htmlAttributes = new { @class = "form-control", @Name = "model.Heading" } })
                        @*@Html.ValidationMessageFor(model => model.Heading, "", new { @class = "text-danger" })*@
                        <span class="field-validation-valid text-danger" data-valmsg-for="model.Heading" data-valmsg-replace="true"></span>
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-md-12">
                    @Html.LabelFor(model => model.HeadingContent, htmlAttributes: new { @class = "control-label" })
                    <div class="form-group">
                        @Html.TextAreaFor(model => model.HeadingContent, new { @class = "form-control", @Name = "model.HeadingContent", @rows = "5" })
                        @*@Html.ValidationMessageFor(model => model.HeadingContent, "", new { @class = "text-danger" })*@
                        <span class="field-validation-valid text-danger" data-valmsg-for="model.HeadingContent" data-valmsg-replace="true"></span>
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-md-12">
                    @Html.LabelFor(model => model.FromCountryCode, htmlAttributes: new { @class = "control-label" })
                    <div class="form-group">
                        @Html.ListBoxFor(x => x.FromCountryList, new SelectList((IEnumerable<SelectListItem>)ViewBag.CountryList, "Value", "Text"), new { @class = "selectCountry form-control", @Name = "model.FromCountryList" })
                        @*@Html.ValidationMessageFor(model => model.FromCountryCode, "", new { @class = "text-danger" })*@
                        <span class="field-validation-valid text-danger" data-valmsg-for="model.FromCountryList" data-valmsg-replace="true"></span>
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-md-12">
                    @Html.LabelFor(model => model.CountryCode, htmlAttributes: new { @class = "control-label" })
                    <div class="form-group">
                        @Html.ListBoxFor(m => m.CountryList, this.ViewBag.CountryList as SelectList, new { @class = "selectCountry form-control", @Name = "model.CountryList" })
                        @*@Html.ValidationMessageFor(model => model.CountryCode, "", new { @class = "text-danger" })*@
                        <span class="field-validation-valid text-danger" data-valmsg-for="model.CountryList" data-valmsg-replace="true"></span>
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-md-12">
                    @Html.LabelFor(model => model.QuoteType, htmlAttributes: new { @class = "control-label" })
                    <div class="form-group">
                        @*@Html.DropDownListFor(x => x.QuoteTypeList, ViewBag.QuoteTypeList as SelectList, "--Select Branch--", new { @class = "selectCountry  form-control", @Name = "model.QuoteTypeList" })*@
                        @Html.ListBoxFor(m => m.QuoteTypeList, this.ViewBag.QuoteTypeList as SelectList, new { @class = "selectCountry form-control", @Name = "model.QuoteTypeList" })
                        @*@Html.ValidationMessageFor(model => model.QuoteType, "", new { @class = "text-danger" })*@
                        <span class="field-validation-valid text-danger" data-valmsg-for="model.QuoteTypeList" data-valmsg-replace="true"></span>
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-md-12">
                    @Html.LabelFor(model => model.Company, htmlAttributes: new { @class = "control-label" })
                    <div class="form-group">
                        @Html.ListBoxFor(m => m.CompanyList, this.ViewBag.CompanyList as SelectList, new { @class = "selectCountry form-control", @Name = "model.CompanyList" })
                        @*@Html.ValidationMessageFor(model => model.Company, "", new { @class = "text-danger" })*@
                        <span class="field-validation-valid text-danger" data-valmsg-for="model.CompanyList" data-valmsg-replace="true"></span>
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-md-12">
                    @Html.LabelFor(model => model.DisplayOrder, htmlAttributes: new { @class = "control-label" })
                    <div class="form-group">
                        @Html.EditorFor(model => model.DisplayOrder, new { htmlAttributes = new { @class = "form-control", @Name = "model.DisplayOrder", @onkeydown = "return ['Backspace', 'Delete', 'ArrowLeft', 'ArrowRight'].includes(event.key) || !isNaN(Number(event.key));" } })
                        @*@Html.ValidationMessageFor(model => model.DisplayOrder, "", new { @class = "text-danger" })*@
                        @*<span id="DisplayOrderValidation" class="text-danger d-none">Please select Display Order</span>
                            <span id="DisplayOrderRangeValidation" class="text-danger d-none">Display Order must be a non-negative number</span>*@
                        <span class="field-validation-valid text-danger" data-valmsg-for="model.DisplayOrder" data-valmsg-replace="true"></span>
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-md-12 text-center">
                    <div class="form-group">
                        <input type="button" value="Save" class="btn btn-warning mr-2" onclick="SaveManageContent();" />
                        <input type="button" value="Cancel" class="btn btn-cancel" onclick="$('#contentmodalPopup').modal('hide');" />
                    </div>
                </div>
            </div>
        }
    </div>
</div>
<script src="~/Scripts/jquery.validate.min.js"></script>
<script src="~/Scripts/jquery.validate.unobtrusive.min.js"></script>
<script type="text/javascript">
    $(document).ready(function () {
        $('.selectCountry').selectpicker({
            title: '- Select Item -',
        });
        $('#HeadingContent').summernote({
            height: 100,
            minHeight: null,
            maxHeight: null,
            focus: true
        });

        $('.selectCountry').change(function () {
            $(this).closest('form').valid(); // Manually trigger validation for the dropdown
        });
    });

    function SaveManageContent() {        
        //let displayOrder = $("#DisplayOrder").val();
        if ($('#form').valid()) {
            //if ($('#DisplayOrder').val() < 1) {

            //}
            let data = $('#form').serializeArray();
            $.ajax({
                url: '@Url.Action("ManageContent", "ContentMaster")',
                async: false,
                type: 'POST',
                data: data,
                success: function (data) {
                    if (data && data.Success) {
                        BindMasterContentList();
                        $('#contentmodalPopup').modal('hide');
                        toastr.success(data.Message);
                    }
                    else {
                        toastr.error(data.Message);
                    }
                },
            });
        }
        @*if ($('#DisplayOrder').val() == "") {
            $('#DisplayOrderRangeValidation').addClass('d-none');
            $('#DisplayOrderValidation').removeClass('d-none');
            return false;
        }
        else if ($("#DisplayOrder").val() < 1) {
            $('#DisplayOrderRangeValidation').removeClass('d-none');
            $('#DisplayOrderValidation').addClass('d-none');
            return false;
        }
        else if ($('#form').valid()) {
            $("#DisplayOrderValidation, #DisplayOrderRangeValidation").addClass('d-none');
            $.ajax({
                url: '@Url.Action("ManageContent", "ContentMaster")',
                async: false,
                type: 'POST',
                data: data,
                success: function (data) {
                    if (data && data.Success) {
                        BindMasterContentList();
                        $('#contentmodalPopup').modal('hide');
                        toastr.success(data.Message);
                    }
                    else {
                        toastr.error(data.Message);
                    }
                },
            })
        }*@
    }
</script>