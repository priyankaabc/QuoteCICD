@model QuoteCalculator.Service.Models.ImportsQuoteModel
@using QuoteCalculatorAdmin.Models

@{
    ViewBag.Title = "Edit";
}
@using (Html.BeginForm("AddEditImportQuote", "ImportsQuote", FormMethod.Post, new { @class = "custom-inputs", @Id = "ImportsQuoteForm" }))
{
    @Html.HiddenFor(x => x.Id, new { @Name = "model.Id", @id = "ImportQuoteId" })
    @Html.HiddenFor(x => x.RefNo, new { @Name = "model.RefNo", @id = "ReferenceNo" })

        <div class="row">
            <div class="col-sm-12">
                <div class="card">
                    <div class="card-header d-flex justify-content-between align-items-center">
                        <h4 class="card-title mb-0 d-flex align-items-center">
                            <i class="icon-info22 position-left icon-set"></i> Imports Quote Details
                        </h4>
                    </div>
                    <div class="card-body">
                        <div class="row">
                            @if (Model.Type == "Customer")
                            {
                                <div class="col-md-3 form-group">
                                    <b>Customer Name:</b>
                                </div>
                                <div class="col-md-3 form-group">
                                    <span>@Model.CustomerName</span>
                                </div>
                            }
                            @if (Model.Type == "Agent")
                            {
                                <div class="col-md-3 form-group">
                                    <b>Agent Name:</b>
                                </div>
                                <div class="col-md-3 form-group">
                                    <span>@Model.AgentName</span>
                                </div>
                            }
                            <div class="col-md-3 form-group">
                                <b>Origin Country:</b>
                            </div>
                            <div class="col-md-3 form-group">
                                <span>@Model.StrCountry</span>
                            </div>
                        </div>

                        <div class="row">
                            <div class="col-md-3 form-group">
                                <b>Origin Town:</b>
                            </div>
                            <div class="col-md-3 form-group">
                                <span>@Model.OriginTown</span>
                            </div>
                            <div class="col-md-3 form-group">
                                <b>POE:</b>
                            </div>
                            <div class="col-md-3 form-group">
                                <span>@Model.StrPOE</span>
                            </div>
                        </div>

                        <div class="row">
                            <div class="col-md-3 form-group">
                                <b>Branch:</b>
                            </div>
                            <div class="col-md-3 form-group">
                                <span>@Model.StrBranch</span>
                            </div>
                            <div class="col-md-3 form-group">
                                <b>Service:</b>
                            </div>
                            <div class="col-md-3 form-group">
                                <span>@Model.StrService</span>
                            </div>
                        </div>

                        <div class="row">
                            <div class="col-md-3 form-group">
                                <b>Container Size:</b>
                            </div>
                            <div class="col-md-3 form-group">
                                <span>@Model.StrContainerSize</span>
                            </div>
                        </div>
                        <hr />
                        <div class="row">
                            <div class="col-sm-12">
                                <div class="panel panel-white bg-white p-4">
                                    <h6 class="panel-title">
                                        <i class="icon-coin-pound position-left icon-set"></i> <b class="text-bold pt-0" style="text-transform:uppercase;">Additional Costs</b>
                                    </h6>
                                    <div class="row">
                                        <div class="col-md-12">
                                            <div class="table-responsive">
                                                <table id="tblDestinationDetails" class="table  dataTable nowrap" width="100%">
                                                    <thead>
                                                        <tr>
                                                            <th>Consignee Name</th>
                                                            <th>Vol</th>
                                                            <th>Consignment</th>
                                                            <th>Address</th>
                                                            <th>Rate</th>
                                                            <th>Additional Cost</th>
                                                            <th>Total Cost</th>
                                                        </tr>
                                                    </thead>
                                                </table>
                                            </div>


                                            @*@(Html.Kendo().Grid<DestinationDetails>()
                .Name("DestinatinoDetailGrid")
                .Columns(columns =>
                {
                    columns.Bound(m => m.ConsigneeName);
                    columns.Bound(m => m.Kgs).Title("Vol"); ;
                    columns.Bound(m => m.VehicleName).Title("Consignment");
                    columns.Bound(m => m.Address);
                    columns.Bound(m => m.StrRate).Title("Rate");
                    columns.Bound(m => m.AdditionalCost).Title("Additional Cost");
                    columns.Bound(m => m.TotalCost).Title("Total Cost");

                })
                .Filterable()
                .ToolBar(toolbar =>
                {
                                //if (AuthorizationHelper.CanAdd(ViewContext.RouteData.Values["Controller"].ToString()))
                                //{
                                //    toolbar.Custom().Text("Add Imports").Action("AddEdit", "ImportsQuote", new { @id = 0 });
                                //}
                            })

                .Pageable(x =>
                {
                    x.Refresh(true);
                    x.PageSizes(CommonHelper.PageSizes);
                })
                .NoRecords()
                .DataSource(dataSource => dataSource
                    .Ajax()
                    .PageSize(CommonHelper.PazeSize)
                    .Model(model => model.Id(d => d.Id))
                    .Events(events => events.Error("onError(\"DestinatinoDetailGrid\")"))
                    .Read(read => read.Action("GetDestinationDetails", "ImportsQuote").Data("additionalParam"))
                )
                .Events(e => e.DataBound("calculateTotalCost")))*@

                                        </div>
                                    </div>

                                    <div class="row mt-3 align-items-center">
                                        <div class="col-lg-6 col-12">
                                            <div class="d-flex align-items-center mb-2">
                                                <b class="font-size15 custom-color mr-2">Total Cost:</b>
                                                <span id="importQuoteTotalCost" class="font-size15"></span>
                                            </div>
                                        </div>

                                        <div class="col-lg-6 col-12">
                                            <div class="d-flex align-items-center">
                                                <b class="font-size15 custom-color mr-2">Updated Cost:</b>
                                                <div class="input-fix-pound">
                                                    <span class="fix-icon ">£</span>
                                                    <input type="number" class="w-100 form-control" min="0"  id="UpdatedCost" 
                                                           onkeydown="return ['Backspace', 'Delete', 'ArrowLeft', 'ArrowRight', '.'].includes(event.key) ? true : !isNaN(Number(event.key))" />
                                                </div>
                                            </div>
                                        </div>
                                    </div>

                                </div>
                            </div>
                        </div>

                        
                        <div class="col-md-12 mt-3">
                            <div class="d-flex align-items-center justify-content-between">
                                <button class="btn btn-cancel" type="button" onclick="OnBack();">Back</button>
                                <button class="btn btn-warning" type="button" onclick="SaveImportQuoteAdditionalCost();">Save</button>
                            </div>

                        </div>
                    </div>
                </div>
            </div>
        </div>

}
<script type="text/javascript">
    var DestinationDetailTable = $('tblDestinationDetails').DataTable();
    var ImportQuoteTotalCost = 0;
    $(document).ready(function () {
        $("#menu_ImportsQuote").addClass("active");
        GetDestinationDetails();

    });

    function GetDestinationDetails() {
        $.ajax({
            url: encodeURI('@Url.Action("GetDestinationDetails", "ImportsQuote")'),
            type: 'GET',
            data: {
                ImportQuoteId: $('#ImportQuoteId').val()
            },
            dataType: 'json',
            success: BindDestinationGrid
        });
    }

    function BindDestinationGrid(data) {
        try {
            if (DestinationDetailTable != 'undefined') {
                DestinationDetailTable.destroy();
            }
            DestinationDetailTable = $('#tblDestinationDetails').DataTable({
                colReorder: {
                    enable: false
                },
                "lengthMenu": [10,20, 50, 100, 200, 500],
                "pageLength": 10,
                "order": [],
                //dom: 'Blfrtip',
                "bFilter": true,
                "aaData": data.Data,
                "aoColumns": [
                    {
                        "mData": "ConsigneeName",
                        "className": "text-left"
                    },
                    {
                        "mData": "Kgs",
                        "className": "text-left "
                    },
                    {
                        "mData": "VehicleName",
                        "className": "text-left"
                    },
                    {
                        "mData": "Address",
                        "className": "text-left"
                    },
                    {
                        "mData": "StrRate",
                        "className": "text-left"
                    },
                    {
                        "mData": "AdditionalCost",
                        "className": "text-left"
                    },
                    {
                        "mData": "TotalCost",
                        "className": "text-left"
                    }
                ],
                "initComplete": function () {
                    calculateTotalCost(data.Data);
                }
            });
            $(".dataTables_length").css('clear', 'none');
            $(".dataTables_length").css('margin-right', '20px');
            $(".dataTables_info").css('clear', 'none');
            $(".dataTables_info").css('padding', '0');
        } catch (e) {
            console.error(e.message);
        }
    }

    function calculateTotalCost(data) {
        let TotalCost = 0;
        data.forEach(x => {
            TotalCost += x.TotalCost && x.TotalCost != undefined ? parseFloat(x.TotalCost.substring(2)) : 0;
        });
        $("#importQuoteTotalCost").text("£ " + TotalCost.toFixed(2));
        $("#UpdatedCost").val(TotalCost.toFixed(2));
        ImportQuoteTotalCost = TotalCost.toFixed(2);
    }

    function SaveImportQuoteAdditionalCost() {
        $.ajax({
            url: '@Url.Action("SaveImportQuoteAddCost", "ImportsQuote")',
            async: false,
            type: 'POST',
            data: {
                TotalCost: ImportQuoteTotalCost,
                UpdatedCost: $("#UpdatedCost").val(),
                ImportQuoteId: $("#ImportQuoteId").val()
            },
            success: function (data) {
                if (data.IsSuccess) {
                    toastr.success(data.Message);
                    const urllink = '@Url.Action("ThankYou", "ImportsQuote")?ReferenceNo=' + data.ReferenceNo; //$("#ReferenceNo").val();
                    window.location.href = urllink;
                }
                else {
                    toastr.error(data.Message);
                }
            }
        });
    }
    //$(window).on('keyup', function (e) {
    //    calculateAddCost();
    //});
    //function calculateAddCost() {
    //    var totalTariff = $("#importQuoteTotalRate").text();
    //    var table = $("#gridImportAddtionalCost table");
    //    table.find('tr').each(function (i) {
    //        if (i != 0) {
    //            var tds = $(this).find('td'),
    //                Cost = tds.eq(1).find('input').val()
    //            Cost = (!Cost || Cost == '') ? 0 : Cost;
    //            totalTariff = parseFloat(totalTariff) + parseFloat(Cost);
    //        }
    //    });

    //    $("#importQuoteTotalCost").text('£ ' + totalTariff);
    //}
    function OnBack() {
        history.back();
    }
</script>
<style>
    #UpdatedCost {
        padding-left: 25px;
        border: 1px solid;
        border-radius: .25rem;
    }

    .font-size15 {
        font-size: 15px;
    }

    .input-fix-pound {
        width: 145px;
        flex: 0 0 auto;
        position: relative;
    }

    .fix-icon {
        position: absolute;
        top: 50%;
        left: 10px;
        transform: translate(0, -50%);
    }
</style>