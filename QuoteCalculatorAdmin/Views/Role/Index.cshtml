@using QuoteCalculator.Service.Models
<div class="card">
    <div class="card-header d-flex justify-content-between">
        <h5 class="card-title mb-0">Role Master</h5>
        <a class="btn btn-warning text-right" href="#" onclick="openAddEditRoleModal(0)" data-toggle="modal" data-target="#manageRolemodalPopup"><i class="icon-plus2"></i>  Add Role</a>
    </div>
  
    <div class="card-body">
        <div class="row">
            <div class="col-12">
                <div class="table-responsive">
                    <table id="tblRoleList" class="table dataTable nowrap" width="100%">
                        <thead>
                            <tr>
                                <th scope="col">Role Name</th>
                                <th scope="col">Is Active</th>
                                <th scope="col">Action</th>
                            </tr>
                        </thead>
                    </table>
                </div>
            </div>

        </div>
    </div>
</div>

<div class="modal" id="usermodalPopup" tabindex="-1" role="dialog" aria-labelledby="myModalLabel" aria-hidden="true" style=" top: 5% !important;">
    <div class="modal-dialog modal-lg modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Role Rights</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <div id="divrolesmodalPopup">
                </div>
            </div>

        </div>
    </div>
</div>

<div class="modal" id="manageRolemodalPopup" tabindex="-1" role="dialog" aria-labelledby="myModalLabel" aria-hidden="true" style=" top: 5% !important;">
    <div class="modal-dialog modal-md modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Manage Role</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <div id="divmanageRolemodalPopup">
                </div>
            </div>

        </div>
    </div>
</div>


@*<div class="modal fade" id="usermodalPopup" tabindex="-1" role="dialog" aria-labelledby="myModalLabel" aria-hidden="true" style=" top: 5% !important;">
        <div class="vertical-alignment-helper">
            <div class="modal-dialog vertical-align-center">
                <div class="modal-content">
                    <div class="modal-header">
                        <span class="h4 mb-0" id="myModalLabel"><b>User Detail</b></span>
                        <button type="button" class="close" data-dismiss="modal">
                            <span aria-hidden="true">&times;</span><span class="sr-only">Close</span>
                        </button>
                    </div>
                    <div class="modal-body">
                        <div id="divrolesmodalPopup">
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>*@

<script src="~/Scripts/Pages/Role.js"></script>



@*<script src="https://cdn.datatables.net/1.10.20/js/jquery.dataTables.min.js"></script>
    <script src="https://cdn.datatables.net/1.10.20/js/dataTables.bootstrap.min.js"></script>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.2.0/css/all.min.css" integrity="sha512-xh6O/CkQoPOWDdYTDqeRdPCVd1SpvCA9XXcUnZS2FmJNp1coAFzvtCN9BmamE+4aHK8yyUHUSCcJHgXloTyT2A==" crossorigin="anonymous" referrerpolicy="no-referrer" />
    <style>
        thead {
            background: #2c4174 !important;
            color: white !important;
        }

        .font-15 {
            font-size: 15px;
        }

        .pagination > .active > a {
            background: #2c4174 !important;
        }

            .pagination > .active > a :hover {
                background: #2c4174 !important;
            }

        .form-control {
            display: block !important;
            width: 100% !important;
            height: 38px !important;
            padding: 8px 16px !important;
            font-size: 13px !important;
            line-height: 1.5384616 !important;
            color: #333 !important;
            background-color: transparent !important;
            background-image: none !important;
            border: 1px solid #ddd !important;
            border-radius: 3px !important;
            -webkit-box-shadow: inset 0 1px 1px rgb(0 0 0 / 8%);
            box-shadow: inset 0 1px 1px rgb(0 0 0 / 8%);
            -webkit-transition: border-color ease-in-out .15s,box-shadow ease-in-out .15s;
            -o-transition: border-color ease-in-out .15s,box-shadow ease-in-out .15s;
            transition: border-color ease-in-out .15s,box-shadow ease-in-out .15s;
        }

            .form-control:focus {
                border-color: #009688 !important;
                box-shadow: none !important;
            }
    </style>

    <div class="row">
        <div class="col-xs-12">
            <div class="panel panel-white">
                <div class="panel-heading">
                    <h5 class="panel-title">Role Master</h5>
                </div>
                <div class="panel-body">
                    @(Html.Kendo().Grid<tbl_Role>()
                                .Name("gridRoleMaster")
                                .Columns(columns =>
                                {


                                    columns.Command(command =>
                                    {
                                        if (AuthorizationHelper.CanEdit(ViewContext.RouteData.Values["Controller"].ToString()))
                                        {
                                            command.Edit().Text(" ").HtmlAttributes(new { @title = "Edit" });
                                        }
                                        if (AuthorizationHelper.CanDelete(ViewContext.RouteData.Values["Controller"].ToString()))
                                        {
                                            command.Destroy().Text(" ").HtmlAttributes(new { title = "Delete" });
                                        }
                                        if (AuthorizationHelper.CanEdit(ViewContext.RouteData.Values["Controller"].ToString()))
                                        {
                                            command.Custom("Assign Rights").Click("assignRights").HtmlAttributes(new { @title = "Assign Rights" });
                                        }
                                        //command.Edit().Text(" ").HtmlAttributes(new { @title = "Edit" });
                                        //command.Destroy().Text(" ").HtmlAttributes(new { title = "Delete" });

                                    }).Title("Action").Width(140).HtmlAttributes(CommonHelper.ActionCenterColumnStyleWithCanStatus)
                                                  .HeaderHtmlAttributes(CommonHelper.ActionCenterColumnStyleWithCanStatus);

                                    columns.Bound(m => m.RoleName).Title("Role Name");
                                    if (AuthorizationHelper.CanChangeStatus(ViewContext.RouteData.Values["Controller"].ToString()))
                                    {
                                        columns.Bound(m => m.IsActive).Filterable(false)
                                               .ClientTemplate(Html.SetStatusClientTemplate("IsActive", "Role", "ChangeStatus",
                                               "id=#=RoleId#", "#=RoleId#", "gridRoleMaster", "Role")).HtmlAttributes(CommonHelper.StatusColumnStyle)
                                                  .HeaderHtmlAttributes(CommonHelper.StatusColumnStyle).Title("Change Status").Width(150);

                                    }
                                    // columns.Bound(m => m.Password).Width(100);
                                    //columns.Bound(m => m.IsActive).ClientTemplate("<input type='checkbox' disabled='disabled' #= IsActive ? checked='checked' :'' # />");

                                })
                                .ToolBar(toolbar =>
                                {
                                    if (AuthorizationHelper.CanChangeStatus(ViewContext.RouteData.Values["Controller"].ToString()))
                                    {
                                        toolbar.Create().Text("Add Role").HtmlAttributes(new { @title = "Add Role" });
                                    }

                                })
                                .Editable(editable =>
                                {
                                    editable.Mode(GridEditMode.PopUp);
                                    editable.DisplayDeleteConfirmation("Are you sure you want to delete this Role?");
                                    editable.Window(x => x.Title("Manage Role"));
                                })
                                .Pageable(x =>
                                {
                                    x.Refresh(true);
                                    x.PageSizes(CommonHelper.PageSizes);
                                })
                                .NoRecords()
                                //.Events(grid => grid.Edit("edit"))
                                .DataSource(dataSource => dataSource
                                .Ajax()
                                .ServerOperation(true)
                                .PageSize(CommonHelper.PazeSize)
                                .Model(model => model.Id(d => d.RoleId))
                                .Events(events => { events.Error("onError(\"gridRoleMaster\")"); events.RequestEnd("reqEnd"); })
                                //.Events(events => events.Error("onError(\"gridRole\")"))
                                .Read(read => read.Action("Read", "Role"))
                                .Destroy(update => update.Action("Destroy", "Role"))
                                .Create(update => update.Action("addEdit", "Role"))
                                .Update(update => update.Action("addEdit", "Role"))
                                ))
                </div>
            </div>
        </div>
    </div>
    @(Html.Kendo().Window()
            .Name("myWindow")
            .Visible(false)
            .Draggable(true)
            .Modal(true)
            .Width(630)
            .Height(450)
            .Events(events => events.Activate("onActivate")))

    <script type="text/javascript">
    $(document).ready(function () {
        BindRoleList();
    });

    function BindRoleList() {
        try {
            debugger;
            var dtuserList = $('#tblRoleList').DataTable();
            if (dtuserList != 'undefined') {
                dtuserList.destroy();
            }


            dtuserList = $('#tblRoleList').DataTable({
                "order": [0, 'desc'],
                "dom": 'frtlip',
                "iDisplayLength": 10,
                "bFilter": true,
                "proccessing": true,
                "serverSide": true,
                "ajax": {
                    "url": encodeURI('@Url.Action("GetRoleList", "Role")'),
                    "type": "POST",
                    "dataType": "JSON"
                },
                "aoColumns": [

                    {
                        "mData": "RoleName",
                        "className": "text-left"
                    },
                    {
                        "mData": "IsActive",
                        "className": "text-left",
                        "render": function (data, row, meta) {
                            if (meta.IsActive) {
                                return "Yes";
                            }
                            else {
                                return "No";
                            }


                        }
                    },
                    {
                        "mData": "id",
                        "className": "text-center",
                        "render": function (data, type, row, meta) {
                            //var ActionButtonEdit = '<a href="javascript:void(0)" title="Edit" onclick="openUserModal(' + row.id +')" data-toggle="modal" data-target="#usermodalPopup"><i class="fa fa-pencil text-primary font-15"></i></a>';
                            //var ActionButtonDelete = '<a href="javascript:void(0)" onclick="deleteUser(' + row.id +')" title="Delete"><i class="fa fa-trash text-primary font-15"></i></a>';
                            var result = '';
                            //result = result + ActionButtonEdit;
                            //result = result +'&nbsp;&nbsp;&nbsp;'+ ActionButtonDelete;
                            return result;
                        }
                    }

                ],
                "initComplete": function () {

                    var dataTable = $('#tblRoleList').DataTable();
                    $('[data-toggle="tooltip"]').tooltip();

                },
                "fnDrawCallback": function () {

                },
                "fnRowCallback": function (nRow, aData, iDisplayIndex, iDisplayIndexFull) {
                    if (aData.RoleId == 0) {
                        $('td', nRow).css('background-color', '#FFA500');
                        $('td', nRow).css('color', '#ffffff ');
                    }
                }
            });

            $(".dataTables_length").css('clear', 'none');
            $(".dataTables_length").css('margin-right', '20px');
            $(".dataTables_info").css('clear', 'none');
            $(".dataTables_info").css('padding', '0');
        } catch (e) {
            alert(e.message);
        }
    }
    function reqEnd(para) {

        if (para.response.Errors == undefined) {
            if (para.type == 'update' || para.type == 'create' || para.type == 'destroy') {
                $('#gridRoleMaster').data('kendoGrid').dataSource.read();
            }
            if (para.response.Message != undefined) {
                window.SucessMessage(para.response.Message);
            }
        }
    }
    function OnEdit(e) {
        e.preventDefault();
        var dataItem = this.dataItem($(e.currentTarget).closest("tr"));
        window.location.href = "@Url.Action("AddEdit", "EmailTemplate")?id=" + dataItem.Id;
    }

    function assignRights(e) {
        e.preventDefault();
        var tr = $(e.target).closest("tr");
        var data = this.dataItem(tr);
        var urllink = '@Url.Action("RoleMenusView", "Role")';

        setLocalValue('RoleId', data.RoleId);

        var window = $("#myWindow").data("kendoWindow");
        window.content("");
        window.title("Assign Access Rights");
        window.refresh({
            url: urllink

        });

        window.center();
        window.open();
    }

    function additionalInfo() {
        return {
            roleId: getLocalValue('RoleId')
        };
    }

    function onActivate() {
        CheckAllView();
        CheckAllEdit();
        CheckAllAdd();
        CheckAllDelete();
        CheckAllStatusChange();
        }
    </script>*@
